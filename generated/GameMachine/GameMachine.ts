// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCardMinted extends ethereum.Event {
  get params(): AddCardMinted__Params {
    return new AddCardMinted__Params(this);
  }
}

export class AddCardMinted__Params {
  _event: AddCardMinted;

  constructor(event: AddCardMinted) {
    this._event = event;
  }

  get cardId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AddCardNotMinted extends ethereum.Event {
  get params(): AddCardNotMinted__Params {
    return new AddCardNotMinted__Params(this);
  }
}

export class AddCardNotMinted__Params {
  _event: AddCardNotMinted;

  constructor(event: AddCardNotMinted) {
    this._event = event;
  }

  get cardId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChangePlayOncePrice extends ethereum.Event {
  get params(): ChangePlayOncePrice__Params {
    return new ChangePlayOncePrice__Params(this);
  }
}

export class ChangePlayOncePrice__Params {
  _event: ChangePlayOncePrice;

  constructor(event: ChangePlayOncePrice) {
    this._event = event;
  }

  get newPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LockMachine extends ethereum.Event {
  get params(): LockMachine__Params {
    return new LockMachine__Params(this);
  }
}

export class LockMachine__Params {
  _event: LockMachine;

  constructor(event: LockMachine) {
    this._event = event;
  }

  get locked(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveCard extends ethereum.Event {
  get params(): RemoveCard__Params {
    return new RemoveCard__Params(this);
  }
}

export class RemoveCard__Params {
  _event: RemoveCard;

  constructor(event: RemoveCard) {
    this._event = event;
  }

  get card(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get removeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RunMachineSuccessfully extends ethereum.Event {
  get params(): RunMachineSuccessfully__Params {
    return new RunMachineSuccessfully__Params(this);
  }
}

export class RunMachineSuccessfully__Params {
  _event: RunMachineSuccessfully;

  constructor(event: RunMachineSuccessfully) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get times(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShuffleCount extends ethereum.Event {
  get params(): ShuffleCount__Params {
    return new ShuffleCount__Params(this);
  }
}

export class ShuffleCount__Params {
  _event: ShuffleCount;

  constructor(event: ShuffleCount) {
    this._event = event;
  }

  get shaffle(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GameMachine__gameRoundsResult {
  value0: BigInt;
  value1: Address;
  value2: i32;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class GameMachine extends ethereum.SmartContract {
  static bind(address: Address): GameMachine {
    return new GameMachine("GameMachine", address);
  }

  administrator(): Address {
    let result = super.call("administrator", "administrator():(address)", []);

    return result[0].toAddress();
  }

  try_administrator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "administrator",
      "administrator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amountWithId(param0: BigInt): BigInt {
    let result = super.call("amountWithId", "amountWithId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_amountWithId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountWithId",
      "amountWithId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  banned(): boolean {
    let result = super.call("banned", "banned():(bool)", []);

    return result[0].toBoolean();
  }

  try_banned(): ethereum.CallResult<boolean> {
    let result = super.tryCall("banned", "banned():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cardAmount(): BigInt {
    let result = super.call("cardAmount", "cardAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cardAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cardAmount", "cardAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cardIdCount(): BigInt {
    let result = super.call("cardIdCount", "cardIdCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cardIdCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cardIdCount", "cardIdCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cardIdWithIndex(index: BigInt): BigInt {
    let result = super.call(
      "cardIdWithIndex",
      "cardIdWithIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toBigInt();
  }

  try_cardIdWithIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cardIdWithIndex",
      "cardIdWithIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cardMintedAmountWithId(param0: BigInt): BigInt {
    let result = super.call(
      "cardMintedAmountWithId",
      "cardMintedAmountWithId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_cardMintedAmountWithId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cardMintedAmountWithId",
      "cardMintedAmountWithId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currencyBurnRate(): BigInt {
    let result = super.call(
      "currencyBurnRate",
      "currencyBurnRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currencyBurnRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currencyBurnRate",
      "currencyBurnRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currencyToken(): Address {
    let result = super.call("currencyToken", "currencyToken():(address)", []);

    return result[0].toAddress();
  }

  try_currencyToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currencyToken",
      "currencyToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gameRounds(param0: Address): GameMachine__gameRoundsResult {
    let result = super.call(
      "gameRounds",
      "gameRounds(address):(uint256,address,uint8,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GameMachine__gameRoundsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_gameRounds(
    param0: Address
  ): ethereum.CallResult<GameMachine__gameRoundsResult> {
    let result = super.tryCall(
      "gameRounds",
      "gameRounds(address):(uint256,address,uint8,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameMachine__gameRoundsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  getCardId(account: Address, at: BigInt): BigInt {
    let result = super.call(
      "getCardId",
      "getCardId(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(at)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCardId(account: Address, at: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCardId",
      "getCardId(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(at)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  machineDescription(): string {
    let result = super.call(
      "machineDescription",
      "machineDescription():(string)",
      []
    );

    return result[0].toString();
  }

  try_machineDescription(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "machineDescription",
      "machineDescription():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  machineId(): BigInt {
    let result = super.call("machineId", "machineId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_machineId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("machineId", "machineId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  machineTitle(): string {
    let result = super.call("machineTitle", "machineTitle():(string)", []);

    return result[0].toString();
  }

  try_machineTitle(): ethereum.CallResult<string> {
    let result = super.tryCall("machineTitle", "machineTitle():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  machineUri(): string {
    let result = super.call("machineUri", "machineUri():(string)", []);

    return result[0].toString();
  }

  try_machineUri(): ethereum.CallResult<string> {
    let result = super.tryCall("machineUri", "machineUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  maintaining(): boolean {
    let result = super.call("maintaining", "maintaining():(bool)", []);

    return result[0].toBoolean();
  }

  try_maintaining(): ethereum.CallResult<boolean> {
    let result = super.tryCall("maintaining", "maintaining():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  momijiToken(): Address {
    let result = super.call("momijiToken", "momijiToken():(address)", []);

    return result[0].toAddress();
  }

  try_momijiToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("momijiToken", "momijiToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  playOncePrice(): BigInt {
    let result = super.call("playOncePrice", "playOncePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_playOncePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "playOncePrice",
      "playOncePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundCount(): BigInt {
    let result = super.call("roundCount", "roundCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roundCount", "roundCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shuffleCount(): BigInt {
    let result = super.call("shuffleCount", "shuffleCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_shuffleCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shuffleCount", "shuffleCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _machineId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _machineTitle(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _momijiToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _currencyToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCardMintedWithAmountCall extends ethereum.Call {
  get inputs(): AddCardMintedWithAmountCall__Inputs {
    return new AddCardMintedWithAmountCall__Inputs(this);
  }

  get outputs(): AddCardMintedWithAmountCall__Outputs {
    return new AddCardMintedWithAmountCall__Outputs(this);
  }
}

export class AddCardMintedWithAmountCall__Inputs {
  _call: AddCardMintedWithAmountCall;

  constructor(call: AddCardMintedWithAmountCall) {
    this._call = call;
  }

  get cardId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCardMintedWithAmountCall__Outputs {
  _call: AddCardMintedWithAmountCall;

  constructor(call: AddCardMintedWithAmountCall) {
    this._call = call;
  }
}

export class AddCardNotMintedWithAmountCall extends ethereum.Call {
  get inputs(): AddCardNotMintedWithAmountCall__Inputs {
    return new AddCardNotMintedWithAmountCall__Inputs(this);
  }

  get outputs(): AddCardNotMintedWithAmountCall__Outputs {
    return new AddCardNotMintedWithAmountCall__Outputs(this);
  }
}

export class AddCardNotMintedWithAmountCall__Inputs {
  _call: AddCardNotMintedWithAmountCall;

  constructor(call: AddCardNotMintedWithAmountCall) {
    this._call = call;
  }

  get cardId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCardNotMintedWithAmountCall__Outputs {
  _call: AddCardNotMintedWithAmountCall;

  constructor(call: AddCardNotMintedWithAmountCall) {
    this._call = call;
  }
}

export class AddProfitAccountCall extends ethereum.Call {
  get inputs(): AddProfitAccountCall__Inputs {
    return new AddProfitAccountCall__Inputs(this);
  }

  get outputs(): AddProfitAccountCall__Outputs {
    return new AddProfitAccountCall__Outputs(this);
  }
}

export class AddProfitAccountCall__Inputs {
  _call: AddProfitAccountCall;

  constructor(call: AddProfitAccountCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddProfitAccountCall__Outputs {
  _call: AddProfitAccountCall;

  constructor(call: AddProfitAccountCall) {
    this._call = call;
  }
}

export class BanThisMachineCall extends ethereum.Call {
  get inputs(): BanThisMachineCall__Inputs {
    return new BanThisMachineCall__Inputs(this);
  }

  get outputs(): BanThisMachineCall__Outputs {
    return new BanThisMachineCall__Outputs(this);
  }
}

export class BanThisMachineCall__Inputs {
  _call: BanThisMachineCall;

  constructor(call: BanThisMachineCall) {
    this._call = call;
  }
}

export class BanThisMachineCall__Outputs {
  _call: BanThisMachineCall;

  constructor(call: BanThisMachineCall) {
    this._call = call;
  }
}

export class ChangeBurnRateCall extends ethereum.Call {
  get inputs(): ChangeBurnRateCall__Inputs {
    return new ChangeBurnRateCall__Inputs(this);
  }

  get outputs(): ChangeBurnRateCall__Outputs {
    return new ChangeBurnRateCall__Outputs(this);
  }
}

export class ChangeBurnRateCall__Inputs {
  _call: ChangeBurnRateCall;

  constructor(call: ChangeBurnRateCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeBurnRateCall__Outputs {
  _call: ChangeBurnRateCall;

  constructor(call: ChangeBurnRateCall) {
    this._call = call;
  }
}

export class ChangeMachineDescriptionCall extends ethereum.Call {
  get inputs(): ChangeMachineDescriptionCall__Inputs {
    return new ChangeMachineDescriptionCall__Inputs(this);
  }

  get outputs(): ChangeMachineDescriptionCall__Outputs {
    return new ChangeMachineDescriptionCall__Outputs(this);
  }
}

export class ChangeMachineDescriptionCall__Inputs {
  _call: ChangeMachineDescriptionCall;

  constructor(call: ChangeMachineDescriptionCall) {
    this._call = call;
  }

  get description(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ChangeMachineDescriptionCall__Outputs {
  _call: ChangeMachineDescriptionCall;

  constructor(call: ChangeMachineDescriptionCall) {
    this._call = call;
  }
}

export class ChangeMachineTitleCall extends ethereum.Call {
  get inputs(): ChangeMachineTitleCall__Inputs {
    return new ChangeMachineTitleCall__Inputs(this);
  }

  get outputs(): ChangeMachineTitleCall__Outputs {
    return new ChangeMachineTitleCall__Outputs(this);
  }
}

export class ChangeMachineTitleCall__Inputs {
  _call: ChangeMachineTitleCall;

  constructor(call: ChangeMachineTitleCall) {
    this._call = call;
  }

  get title(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ChangeMachineTitleCall__Outputs {
  _call: ChangeMachineTitleCall;

  constructor(call: ChangeMachineTitleCall) {
    this._call = call;
  }
}

export class ChangePlayOncePriceCall extends ethereum.Call {
  get inputs(): ChangePlayOncePriceCall__Inputs {
    return new ChangePlayOncePriceCall__Inputs(this);
  }

  get outputs(): ChangePlayOncePriceCall__Outputs {
    return new ChangePlayOncePriceCall__Outputs(this);
  }
}

export class ChangePlayOncePriceCall__Inputs {
  _call: ChangePlayOncePriceCall;

  constructor(call: ChangePlayOncePriceCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangePlayOncePriceCall__Outputs {
  _call: ChangePlayOncePriceCall;

  constructor(call: ChangePlayOncePriceCall) {
    this._call = call;
  }
}

export class ChangeShuffleCountCall extends ethereum.Call {
  get inputs(): ChangeShuffleCountCall__Inputs {
    return new ChangeShuffleCountCall__Inputs(this);
  }

  get outputs(): ChangeShuffleCountCall__Outputs {
    return new ChangeShuffleCountCall__Outputs(this);
  }
}

export class ChangeShuffleCountCall__Inputs {
  _call: ChangeShuffleCountCall;

  constructor(call: ChangeShuffleCountCall) {
    this._call = call;
  }

  get _shuffleCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeShuffleCountCall__Outputs {
  _call: ChangeShuffleCountCall;

  constructor(call: ChangeShuffleCountCall) {
    this._call = call;
  }
}

export class LockMachineCall extends ethereum.Call {
  get inputs(): LockMachineCall__Inputs {
    return new LockMachineCall__Inputs(this);
  }

  get outputs(): LockMachineCall__Outputs {
    return new LockMachineCall__Outputs(this);
  }
}

export class LockMachineCall__Inputs {
  _call: LockMachineCall;

  constructor(call: LockMachineCall) {
    this._call = call;
  }
}

export class LockMachineCall__Outputs {
  _call: LockMachineCall;

  constructor(call: LockMachineCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveProfitAccountCall extends ethereum.Call {
  get inputs(): RemoveProfitAccountCall__Inputs {
    return new RemoveProfitAccountCall__Inputs(this);
  }

  get outputs(): RemoveProfitAccountCall__Outputs {
    return new RemoveProfitAccountCall__Outputs(this);
  }
}

export class RemoveProfitAccountCall__Inputs {
  _call: RemoveProfitAccountCall;

  constructor(call: RemoveProfitAccountCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveProfitAccountCall__Outputs {
  _call: RemoveProfitAccountCall;

  constructor(call: RemoveProfitAccountCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RunMachineCall extends ethereum.Call {
  get inputs(): RunMachineCall__Inputs {
    return new RunMachineCall__Inputs(this);
  }

  get outputs(): RunMachineCall__Outputs {
    return new RunMachineCall__Outputs(this);
  }
}

export class RunMachineCall__Inputs {
  _call: RunMachineCall;

  constructor(call: RunMachineCall) {
    this._call = call;
  }

  get userProvidedSeed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get times(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RunMachineCall__Outputs {
  _call: RunMachineCall;

  constructor(call: RunMachineCall) {
    this._call = call;
  }
}

export class TransferAdministratorCall extends ethereum.Call {
  get inputs(): TransferAdministratorCall__Inputs {
    return new TransferAdministratorCall__Inputs(this);
  }

  get outputs(): TransferAdministratorCall__Outputs {
    return new TransferAdministratorCall__Outputs(this);
  }
}

export class TransferAdministratorCall__Inputs {
  _call: TransferAdministratorCall;

  constructor(call: TransferAdministratorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdministratorCall__Outputs {
  _call: TransferAdministratorCall;

  constructor(call: TransferAdministratorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnbanThisMachineCall extends ethereum.Call {
  get inputs(): UnbanThisMachineCall__Inputs {
    return new UnbanThisMachineCall__Inputs(this);
  }

  get outputs(): UnbanThisMachineCall__Outputs {
    return new UnbanThisMachineCall__Outputs(this);
  }
}

export class UnbanThisMachineCall__Inputs {
  _call: UnbanThisMachineCall;

  constructor(call: UnbanThisMachineCall) {
    this._call = call;
  }
}

export class UnbanThisMachineCall__Outputs {
  _call: UnbanThisMachineCall;

  constructor(call: UnbanThisMachineCall) {
    this._call = call;
  }
}

export class UnlockMachineCall extends ethereum.Call {
  get inputs(): UnlockMachineCall__Inputs {
    return new UnlockMachineCall__Inputs(this);
  }

  get outputs(): UnlockMachineCall__Outputs {
    return new UnlockMachineCall__Outputs(this);
  }
}

export class UnlockMachineCall__Inputs {
  _call: UnlockMachineCall;

  constructor(call: UnlockMachineCall) {
    this._call = call;
  }
}

export class UnlockMachineCall__Outputs {
  _call: UnlockMachineCall;

  constructor(call: UnlockMachineCall) {
    this._call = call;
  }
}
