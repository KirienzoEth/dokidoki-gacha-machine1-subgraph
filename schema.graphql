type MachineRun @entity {
  id: ID! # txn hash + log index
  machine: Machine!
  playTimes: BigInt!
  player: Player!
  priceOnRun: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
}

type Transaction @entity {
  id: ID! # txn hash
  transfers: [Transfer!]!
  machineRuns: [MachineRun!]! @derivedFrom(field: "transaction")
  timestamp: BigInt!
}

type Transfer @entity {
  id: ID! # block number + tx index + log index
  transaction: Transaction!
  timestamp: BigInt!
  "null unless the transfer was spending for playing a machine"
  machineRun: MachineRun
  from: Bytes!
  to: Bytes!
  value: BigInt!
  token: Token!
  logIndex: BigInt!
}

type Player @entity {
  id: ID! # wallet address
  machineRuns: [MachineRun!]! @derivedFrom(field: "player")
}

type Token @entity {
  id: ID! # token contract address
  name: String!
  symbol: String!
  decimals: Int!
  currentSupply: BigInt
  "only for azuki"
  burnAmount: BigInt
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type Machine @entity {
  id: ID! # machine address
  indexId: BigInt!
  createdDate: BigInt
  description: String
  title: String
  locked: Boolean!
  playOncePrice: BigInt!
  machineRuns: [MachineRun!]! @derivedFrom(field: "machine")
  machineDayData: [MachineDayData!]! @derivedFrom(field: "machine")
  profitAddresses: [MachineProfitAddress!]! @derivedFrom(field: "machine")
  machineNfts: [MachineNft!]! @derivedFrom(field: "machine")
  playTimes: BigInt!
  amountSpent: BigInt!
  profitAmount: BigInt!
  currencyToken: Token
  "only for Azuki machines"
  burnAmount: BigInt
  "only for ETH machines"
  buybackAmount: BigInt
}

type Collection @entity {
  id: ID! # contract address
  name: String!
  nfts: [Nft!]! @derivedFrom(field: "collection")
}

type Nft @entity {
  id: ID! # collection ID + token ID
  uri: String!
  maxAmount: BigInt!
  collection: Collection!
  machineNfts: [MachineNft!]! @derivedFrom(field: "nft")
}

type MachineNft @entity {
  id: ID! # machine ID + Nft ID
  maxAmount: BigInt!
  currentAmount: BigInt!
  machine: Machine!
  nft: Nft!
}

type ProfitAddress @entity {
  id: ID! # wallet address + token address
  walletAddress: Bytes!
  token: Token!
  profitAddressDayData: [ProfitAddressDayData!]! @derivedFrom(field: "profitAddress")
  machines: [MachineProfitAddress!]! @derivedFrom(field: "profitAddress")
  profitAmount: BigInt!
}

type MachineProfitAddress @entity {
  id: ID! # machine ID + profit address ID
  profitAddress: ProfitAddress!
  machine: Machine!
  machineProfitAddressDayData: [MachineProfitAddressDayData!]! @derivedFrom(field: "machineProfitAddress")
  profitAmount: BigInt!
}

type TokenDayData @entity {
  id: ID! # day start timestamp + token address
  token: Token!
  date: BigInt!
  "only for Azuki"
  burnAmount: BigInt
}

type MachineDayData @entity {
  id: ID! # day start timestamp + machine address
  machine: Machine!
  date: BigInt!
  playTimes: BigInt!
  amountSpent: BigInt!
  profitAmount: BigInt!
  "only for Azuki machines"
  burnAmount: BigInt
  "only for ETH machines"
  buybackAmount: BigInt
}

type ProfitAddressDayData @entity {
  id: ID! # day start timestamp + profit address ID
  profitAddress: ProfitAddress!
  date: BigInt!
  profitAmount: BigInt!
}

type MachineProfitAddressDayData @entity {
  id: ID! # day start timestamp + machine profit address ID
  machineProfitAddress: MachineProfitAddress!
  profitAmount: BigInt!
  date: BigInt!
}